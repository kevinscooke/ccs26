generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  region    String?
  heroCopy  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  series    Series[]
}

model Organizer {
  id        String        @id @default(cuid())
  name      String
  email     String        @unique
  phone     String?
  verified  Boolean       @default(false)
  plan      OrganizerPlan @default(FREE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  events    Event[]
  invoices  Invoice[]
}

enum OrganizerPlan {
  FREE
  PLUS
  PRO
}

model Venue {
  id        String   @id @default(cuid())
  name      String
  address1  String
  address2  String?
  city      String
  state     String
  postal    String
  lat       Decimal? @db.Decimal(9, 6)
  lng       Decimal? @db.Decimal(9, 6)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  series    Series[]

  @@unique([name, address1, city, state, postal])
}

model Series {
  id       String  @id @default(cuid())
  title    String
  slugBase String  @unique // e.g., "cars-and-coffee-concord"
  cityId   String
  city     City    @relation(fields: [cityId], references: [id])
  venueId  String?
  venue    Venue?  @relation(fields: [venueId], references: [id])

  description String?
  timeZone    String  @default("America/New_York")
  // local start time components for the occurrence (24h)
  startHour   Int     @default(9)
  startMinute Int     @default(0)
  durationMin Int     @default(180) // 3 hours

  // RRULE compatible string, e.g. "FREQ=MONTHLY;BYDAY=SA;BYSETPOS=3"
  rrule String

  // housekeeping
  generateHorizonMonths Int       @default(6) // how far ahead to materialize
  lastGeneratedThrough  DateTime? // up to what date we generated

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Event {
  id          String     @id @default(cuid())
  cityId      String
  city        City       @relation(fields: [cityId], references: [id])
  organizerId String?
  organizer   Organizer? @relation(fields: [organizerId], references: [id])
  venueId     String?
  venue       Venue?     @relation(fields: [venueId], references: [id])

  seriesId String?
  series   Series? @relation(fields: [seriesId], references: [id])

  title       String
  slug        String      @unique
  description String?
  startAt     DateTime
  endAt       DateTime?
  type        EventType   @default(MEET)
  status      EventStatus @default(PENDING)
  isFeatured  Boolean     @default(false)
  price       Int?
  source      String?
  url         String?
  images      Image[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  flagged     Boolean     @default(false)

  @@index([status, startAt]) // keeps chronological queries fast
}

enum EventType {
  CARS_AND_COFFEE
  SHOW
  MEET
  TRACK
  OTHER
}

enum EventStatus {
  PENDING
  APPROVED
  PUBLISHED
  REJECTED
}

model Image {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  url       String
  width     Int?
  height    Int?
  alt       String?
  createdAt DateTime @default(now())
}

model Invoice {
  id          String        @id @default(cuid())
  organizerId String
  organizer   Organizer     @relation(fields: [organizerId], references: [id])
  stripeId    String        @unique
  amount      Int
  status      InvoiceStatus @default(PAID)
  lineItem    String
  eventId     String?
  createdAt   DateTime      @default(now())
}

enum InvoiceStatus {
  PAID
  REFUNDED
  FAILED
}

model SeriesException {
  id        String   @id @default(cuid())
  seriesId  String
  series    Series   @relation(fields: [seriesId], references: [id])
  date      DateTime // local date (midnight) in TZ
  action    String   // "SKIP" | "MOVE"
  newDate   DateTime?
  note      String?
}
